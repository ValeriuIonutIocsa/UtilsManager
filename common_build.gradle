import java.nio.file.Files
import java.nio.file.Path
import java.nio.file.Paths
import java.nio.file.StandardCopyOption

if (project.hasProperty('projectGroup')) {
    group = projectGroup
} else {
    group = project.name
}
if (project.hasProperty('projectVersion')) {
    version = projectVersion
} else {
    version = '1.0.0'
}

apply plugin: 'java-library'
apply plugin: 'java-test-fixtures'

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}
compileJava.options.encoding = 'UTF-8'

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    for (final String subProjectName : subProjectNames) {

        if (subProjectName != null) {
            api project(subProjectName)
            testFixturesApi testFixtures(project(subProjectName))
        }
    }

    for (final String compileClassPath : compileClassPaths) {

        if (compileClassPath != null) {
            api compileClassPath
        }
    }
    for (final String compileJarFilePath : compileJarFilePaths) {

        if (compileJarFilePath != null) {
            api files(compileJarFilePath)
        }
    }

    testFixturesImplementation 'org.junit.jupiter:junit-jupiter-api:5.12.2'
    testFixturesRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.12.2'
    testFixturesRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.12.2'

    for (final String testCompileClassPath : testCompileClassPaths) {

        if (testCompileClassPath != null) {
            testFixturesImplementation testCompileClassPath
        }
    }
    for (final String testCompileJarFilePath : testCompileJarFilePaths) {

        if (testCompileJarFilePath != null) {
            testFixturesApi files(testCompileJarFilePath)
        }
    }

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.12.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.12.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.12.2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.12.2'

    for (final String testCompileClassPath : testCompileClassPaths) {

        if (testCompileClassPath != null) {
            testImplementation testCompileClassPath
        }
    }
    for (final String testCompileJarFilePath : testCompileJarFilePaths) {

        if (testCompileJarFilePath != null) {
            testApi files(testCompileJarFilePath)
        }
    }
}

clean {

    subProjectNames.each { dependsOn("${it}:clean") }

    doFirst {
        delete "${projectDir}/bin"
        delete "${projectDir}/out"
    }
}

compileJava {
    dependsOn('processResources')
}

task fatJar(type: Jar, dependsOn: jar) {

    subProjectNames.each { dependsOn("${it}:fatJar") }
    onlyIf { rootDir == projectDir }

    archiveFileName = "${project.name}.jar"
    final File destDir = createDestDir()
    destinationDirectory.set(destDir)
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    final Map<String, ?> manifestAttributesMap = new HashMap<>()
    if (project.hasProperty('mainClass')) {
        manifestAttributesMap.put('Main-Class', mainClass)
    }
    manifestAttributesMap.put('Implementation-Title', project.name)
    manifestAttributesMap.put('Implementation-Version', project.version)
    manifestAttributesMap.put('Build-Time', new Date().format('yyyy-MMM-dd HH:mm:ss.SSS z'))
    manifest {
        attributes (manifestAttributesMap)
    }

    archiveClassifier.set('all')
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar

    final def convertToExePropertyExists = project.hasProperty('convertToExe')
    doLast {
        new File((String) "${destDir}/.gitignore").text = '/*.jar\n/*.exe\n/*.res'
        final File otherDestDir = createOtherDestDir()
        if (otherDestDir != destDir) {
            copyFile(destDir.toString(), otherDestDir.toString(), archiveFileName.get().toString())
        }
        if (convertToExePropertyExists && convertToExe) {

            final File wrapperScriptFile = new File((String) "${destDir}/wrapper/Wrapper.java")
            if (wrapperScriptFile.exists()) {

                exec {
                    final String javaHomeFolderPathString = System.getProperty("java.home")
                    final Path javaExePath = Paths.get(javaHomeFolderPathString, "bin", "java.exe")
                    final String javaExeFilePathString = javaExePath.toAbsolutePath().toString()
                    commandLine javaExeFilePathString, "${wrapperScriptFile}", "${wrapperScriptFile}", "${project.name}"
                    workingDir "${destDir}"
                }
                if (otherDestDir != destDir) {
                    copyFile(destDir.toString(), otherDestDir.toString(), "${project.name}.exe")
                }
            }
        }

        def destinationUriString = otherDestDir.toPath().toUri().toString()
        if (!destinationUriString.startsWith("file:///")) {
            destinationUriString = destinationUriString.replace("file://", "file://///")
        }

        println ''
        println 'JAR folder path:'
        println otherDestDir
        println 'JAR folder URI:'
        println destinationUriString
    }
}

task sourcesJar(type: Jar) {

    subProjectNames.each { dependsOn("${it}:sourcesJar") }
    onlyIf { rootDir == projectDir }

    archiveFileName = "${project.name}_sources.jar"
    final File destDir = createDestDir()
    destinationDirectory.set(destDir)
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    final Map<String, ?> manifestAttributesMap = new HashMap<>()
    if (project.hasProperty('mainClass')) {
        manifestAttributesMap.put('Main-Class', mainClass)
    }
    manifestAttributesMap.put('Implementation-Title', project.name)
    manifestAttributesMap.put('Implementation-Version', project.version)
    manifestAttributesMap.put('Build-Time', new Date().format('dd MMM yyyy, hh:mm:ss zzz'))
    manifest {
        attributes (manifestAttributesMap)
    }

    final def allProjectList = new ArrayList<>()
    allProjectList.add(project)
    subprojects.each {
        final subProject -> allProjectList.add(subProject)
    }

    archiveClassifier.set('sources')
    from {
        allProjectList.collect { it.sourceSets.main.allSource }
    }

    doLast {
        new File((String) "${destDir}/.gitignore").text = '/*.jar\n/*.exe\n/*.res'
        final File otherDestDir = createOtherDestDir()
        if (otherDestDir != destDir) {
            copyFile(destDir.toString(), otherDestDir.toString(), archiveFileName.get().toString())
        }

        def destinationUriString = otherDestDir.toPath().toUri().toString()
        if (!destinationUriString.startsWith("file:///")) {
            destinationUriString = destinationUriString.replace("file://", "file://///")
        }

        println ''
        println 'sources JAR folder path:'
        println otherDestDir
        println 'sources JAR folder URI:'
        println destinationUriString
    }
}

File createOtherDestDir() {

    File otherDestDir = null
    if (project.hasProperty('jarFolderPath') && jarFolderPath != null && !jarFolderPath.trim().isEmpty()) {

        final File jarFolder = file(jarFolderPath)
        if (jarFolder.isDirectory()) {
            otherDestDir = jarFolder

        } else {
            final boolean jarFolderCreated = jarFolder.mkdirs()
            if (jarFolderCreated) {
                otherDestDir = jarFolder
            } else {
                println 'failed to create JAR folder'
            }
        }
    }
    if (otherDestDir == null) {
        otherDestDir = createDestDir()
    }
    return otherDestDir
}

File createDestDir() {
    return file("../${project.name}_EXE")
}

static def copyFile(
        final String srcDir,
        final String destDir,
        final String fileName) {

    Files.copy(
            new File(srcDir, fileName).toPath(),
            new File(destDir, fileName).toPath(),
            StandardCopyOption.REPLACE_EXISTING)
}

artifacts {

    archives fatJar
    archives sourcesJar
}

task subProjectDependencyTree {

    subProjectNames.each { dependsOn("${it}:subProjectDependencyTree") }

    final def projectPathString = project.projectDir.absolutePath

    final def subProjectPathStringList = new ArrayList<>()
    configurations.api.dependencies
            .findAll { final dependency -> dependency instanceof ProjectDependency }
            .each {
                final ProjectDependency projectDependency = (ProjectDependency) it
                final String subProjectName = ":${projectDependency.name}"
                final Project subProject = project.project(subProjectName)
                final def subProjectPathString = subProject.projectDir.absolutePath
                subProjectPathStringList.add(subProjectPathString)
            }

    doLast {
        println 'project: ' + projectPathString
        subProjectPathStringList.each { final subProjectPathString -> println 'subProject: ' + subProjectPathString }
    }
}

apply plugin: 'idea'
idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

apply plugin: 'eclipse'
eclipse {
    classpath {
        downloadJavadoc = true
        downloadSources = true
        containsTestFixtures = true
        containers 'org.eclipse.fx.ide.jdt.core.JAVAFX_CONTAINER'
    }
}

eclipse.classpath.file {
    whenMerged { final classpath ->
        final def testDependencies = classpath.entries
                .findAll { final entry -> entry instanceof org.gradle.plugins.ide.eclipse.model.ProjectDependency &&
                        entry.entryAttributes.test }
        classpath.entries.removeAll testDependencies
    }
}

final def eclipseResourceEncoding = tasks.register('eclipseResourceEncoding')
// encoding will be defined when eclipse task runs
tasks.named('eclipse') { dependsOn(eclipseResourceEncoding) }
// run the task on "Refresh Gradle Project"
eclipse.synchronizationTasks(eclipseResourceEncoding)

eclipseResourceEncoding.configure {
    ext.outputFile = file('.settings/org.eclipse.core.resources.prefs')
    final def compileTask = tasks.findByName('compileJava')
    ext.encoding = provider({ compileTask?.options?.encoding }).orElse(providers.systemProperty('file.encoding'))

    inputs.property("file.encoding", encoding)
    outputs.file(outputFile).withPropertyName('outputFile')
    doLast {
        final Properties eclipseEncodingProperties =
                new Properties(Collections.singletonMap('eclipse.preferences.version', '1'))
        eclipseEncodingProperties.put('encoding/<project>', encoding.get())
        outputFile.withOutputStream { eclipseEncodingProperties.store(it, 'generated by ' + name) }
        eclipseEncodingProperties.list(System.out)
    }
}

afterEvaluate {
    eclipse.project {
        natures 'ch.acanda.eclipse.pmd.builder.PMDNature'
    }
}

test {
    onlyIf { ! Boolean.getBoolean('skip.tests') }

    useJUnitPlatform()
    maxHeapSize = '12g'
    outputs.upToDateWhen { false }
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
    systemProperty 'args', System.getProperty('args')
}

apply plugin: 'test-report-aggregation'
